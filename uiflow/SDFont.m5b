{"category":"SDFont","color":"#fd6a08","blocks":["__SDFont_load","__SDFont_print","__SDFont_CENTER","__SDFont_textWidth","__SDFont_vprint","__SDFont_vprintInRect","__SDFont_printInRect","__SDFont_setWipeDelay","__SDFont_setLineDelay","__SDFont_setPageDelay","__SDFont_EFFECT_WIPE","__SDFont_EFFECT_TYPEWRITER","__SDFont_EFFECT_NONE"],"jscode":"// Block __SDFont_load\nvar __SDFont_load_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"loadFont\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"loadFont\"\n        }\n    ],\n    \"colour\": \"#fd6a08\"\n};\n\nwindow['Blockly'].Blocks['__SDFont_load'] = {\n    init: function() {\n        this.jsonInit(__SDFont_load_json);\n    }\n};\n\nwindow['Blockly'].Python['__SDFont_load'] = function(block) {\n    var loadFont = Blockly.Python.valueToCode(block, 'loadFont', Blockly.Python.ORDER_NONE);\n    return `if (not \"/sd/fonts\" in sys.path):\n    sys.path.append(\"/sd/fonts\")\nimport sdfont\nsdfont.load(${loadFont})` + \"\\n\";\n};\n\n// Block __SDFont_print\nvar __SDFont_print_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"print\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"print\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"x\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"x\"\n        }\n    ],\n    \"message2\": \"%1 %2\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"y\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"y\"\n        }\n    ],\n    \"message3\": \"%1 %2\",\n    \"args3\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"effect\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"effect\"\n        }\n    ],\n    \"message4\": \"%1\",\n    \"args4\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"\"\n        }\n    ],\n    \"colour\": \"#fd6a08\"\n};\n\nwindow['Blockly'].Blocks['__SDFont_print'] = {\n    init: function() {\n        this.jsonInit(__SDFont_print_json);\n    }\n};\n\nwindow['Blockly'].Python['__SDFont_print'] = function(block) {\n    var print = Blockly.Python.valueToCode(block, 'print', Blockly.Python.ORDER_NONE);\nvar x = Blockly.Python.valueToCode(block, 'x', Blockly.Python.ORDER_NONE);\nvar y = Blockly.Python.valueToCode(block, 'y', Blockly.Python.ORDER_NONE);\nvar effect = Blockly.Python.valueToCode(block, 'effect', Blockly.Python.ORDER_NONE);\n    return `# draw text using given font with rolling effect\nsdfont.draw_text(${x}, ${y}, ${print}, color=lcd.get_fg(), effect=${effect})` + \"\\n\";\n};\n\n// Block __SDFont_CENTER\nvar __SDFont_CENTER_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"CENTER\"\n        }\n    ],\n    \"colour\": \"#fd6a08\"\n};\n\nwindow['Blockly'].Blocks['__SDFont_CENTER'] = {\n    init: function() {\n        this.jsonInit(__SDFont_CENTER_json);\n    }\n};\n\nwindow['Blockly'].Python['__SDFont_CENTER'] = function(block) {\n        return [`lcd.CENTER`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __SDFont_textWidth\nvar __SDFont_textWidth_json = {\n    \"output\": null,\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"textWidth\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"textWidth\"\n        }\n    ],\n    \"colour\": \"#fd6a08\"\n};\n\nwindow['Blockly'].Blocks['__SDFont_textWidth'] = {\n    init: function() {\n        this.jsonInit(__SDFont_textWidth_json);\n    }\n};\n\nwindow['Blockly'].Python['__SDFont_textWidth'] = function(block) {\n    var textWidth = Blockly.Python.valueToCode(block, 'textWidth', Blockly.Python.ORDER_NONE);\n    return [`sdfont.getTextWidth(${textWidth})`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __SDFont_vprint\nvar __SDFont_vprint_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"vprint\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"vprint\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"x\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"x\"\n        }\n    ],\n    \"message2\": \"%1 %2\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"y\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"y\"\n        }\n    ],\n    \"message3\": \"%1 %2\",\n    \"args3\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"effect\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"effect\"\n        }\n    ],\n    \"message4\": \"%1\",\n    \"args4\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"\"\n        }\n    ],\n    \"colour\": \"#fd6a08\"\n};\n\nwindow['Blockly'].Blocks['__SDFont_vprint'] = {\n    init: function() {\n        this.jsonInit(__SDFont_vprint_json);\n    }\n};\n\nwindow['Blockly'].Python['__SDFont_vprint'] = function(block) {\n    var vprint = Blockly.Python.valueToCode(block, 'vprint', Blockly.Python.ORDER_NONE);\nvar x = Blockly.Python.valueToCode(block, 'x', Blockly.Python.ORDER_NONE);\nvar y = Blockly.Python.valueToCode(block, 'y', Blockly.Python.ORDER_NONE);\nvar effect = Blockly.Python.valueToCode(block, 'effect', Blockly.Python.ORDER_NONE);\n    return `# draw text vertically using given font with rolling effect\nsdfont.draw_vtext(${x}, ${y}, ${vprint}, color=lcd.get_fg(), effect=${effect})` + \"\\n\";\n};\n\n// Block __SDFont_vprintInRect\nvar __SDFont_vprintInRect_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"vprintInRect\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"vprintInRect\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"x\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"x\"\n        }\n    ],\n    \"message2\": \"%1 %2\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"y\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"y\"\n        }\n    ],\n    \"message3\": \"%1 %2\",\n    \"args3\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"width\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"width\"\n        }\n    ],\n    \"message4\": \"%1 %2\",\n    \"args4\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"height\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"height\"\n        }\n    ],\n    \"message5\": \"%1 %2\",\n    \"args5\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"color\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"color\"\n        }\n    ],\n    \"message6\": \"%1 %2\",\n    \"args6\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"effect\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"effect\"\n        }\n    ],\n    \"message7\": \"%1\",\n    \"args7\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"\"\n        }\n    ],\n    \"colour\": \"#fd6a08\"\n};\n\nwindow['Blockly'].Blocks['__SDFont_vprintInRect'] = {\n    init: function() {\n        this.jsonInit(__SDFont_vprintInRect_json);\n    }\n};\n\nwindow['Blockly'].Python['__SDFont_vprintInRect'] = function(block) {\n    var vprintInRect = Blockly.Python.valueToCode(block, 'vprintInRect', Blockly.Python.ORDER_NONE);\nvar x = Blockly.Python.valueToCode(block, 'x', Blockly.Python.ORDER_NONE);\nvar y = Blockly.Python.valueToCode(block, 'y', Blockly.Python.ORDER_NONE);\nvar width = Blockly.Python.valueToCode(block, 'width', Blockly.Python.ORDER_NONE);\nvar height = Blockly.Python.valueToCode(block, 'height', Blockly.Python.ORDER_NONE);\nvar color = Blockly.Python.valueToCode(block, 'color', Blockly.Python.ORDER_NONE);\nvar effect = Blockly.Python.valueToCode(block, 'effect', Blockly.Python.ORDER_NONE);\n    return `sdfont.draw_vtext_in_rect(${x}, ${y}, ${width}, ${height}, ${vprintInRect}, ${color}, lcd.get_bg(), effect=${effect})` + \"\\n\";\n};\n\n// Block __SDFont_printInRect\nvar __SDFont_printInRect_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"printInRect\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"printInRect\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"x\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"x\"\n        }\n    ],\n    \"message2\": \"%1 %2\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"y\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"y\"\n        }\n    ],\n    \"message3\": \"%1 %2\",\n    \"args3\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"width\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"width\"\n        }\n    ],\n    \"message4\": \"%1 %2\",\n    \"args4\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"height\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"height\"\n        }\n    ],\n    \"message5\": \"%1 %2\",\n    \"args5\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"color\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"color\"\n        }\n    ],\n    \"message6\": \"%1 %2\",\n    \"args6\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"effect\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"effect\"\n        }\n    ],\n    \"message7\": \"%1\",\n    \"args7\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"\"\n        }\n    ],\n    \"colour\": \"#fd6a08\"\n};\n\nwindow['Blockly'].Blocks['__SDFont_printInRect'] = {\n    init: function() {\n        this.jsonInit(__SDFont_printInRect_json);\n    }\n};\n\nwindow['Blockly'].Python['__SDFont_printInRect'] = function(block) {\n    var printInRect = Blockly.Python.valueToCode(block, 'printInRect', Blockly.Python.ORDER_NONE);\nvar x = Blockly.Python.valueToCode(block, 'x', Blockly.Python.ORDER_NONE);\nvar y = Blockly.Python.valueToCode(block, 'y', Blockly.Python.ORDER_NONE);\nvar width = Blockly.Python.valueToCode(block, 'width', Blockly.Python.ORDER_NONE);\nvar height = Blockly.Python.valueToCode(block, 'height', Blockly.Python.ORDER_NONE);\nvar color = Blockly.Python.valueToCode(block, 'color', Blockly.Python.ORDER_NONE);\nvar effect = Blockly.Python.valueToCode(block, 'effect', Blockly.Python.ORDER_NONE);\n    return `sdfont.draw_text_in_rect(${x}, ${y}, ${width}, ${height}, ${printInRect}, ${color}, lcd.get_bg(), effect=${effect})` + \"\\n\";\n};\n\n// Block __SDFont_setWipeDelay\nvar __SDFont_setWipeDelay_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"setWipeDelay\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"setWipeDelay\"\n        }\n    ],\n    \"colour\": \"#fd6a08\"\n};\n\nwindow['Blockly'].Blocks['__SDFont_setWipeDelay'] = {\n    init: function() {\n        this.jsonInit(__SDFont_setWipeDelay_json);\n    }\n};\n\nwindow['Blockly'].Python['__SDFont_setWipeDelay'] = function(block) {\n    var setWipeDelay = Blockly.Python.valueToCode(block, 'setWipeDelay', Blockly.Python.ORDER_NONE);\n    return `sdfont._wipe_delay=${setWipeDelay}` + \"\\n\";\n};\n\n// Block __SDFont_setLineDelay\nvar __SDFont_setLineDelay_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"setLineDelay\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"setLineDelay\"\n        }\n    ],\n    \"colour\": \"#fd6a08\"\n};\n\nwindow['Blockly'].Blocks['__SDFont_setLineDelay'] = {\n    init: function() {\n        this.jsonInit(__SDFont_setLineDelay_json);\n    }\n};\n\nwindow['Blockly'].Python['__SDFont_setLineDelay'] = function(block) {\n    var setLineDelay = Blockly.Python.valueToCode(block, 'setLineDelay', Blockly.Python.ORDER_NONE);\n    return `sdfont._line_delay=${setLineDelay}` + \"\\n\";\n};\n\n// Block __SDFont_setPageDelay\nvar __SDFont_setPageDelay_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"setPageDelay\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"setPageDelay\"\n        }\n    ],\n    \"colour\": \"#fd6a08\"\n};\n\nwindow['Blockly'].Blocks['__SDFont_setPageDelay'] = {\n    init: function() {\n        this.jsonInit(__SDFont_setPageDelay_json);\n    }\n};\n\nwindow['Blockly'].Python['__SDFont_setPageDelay'] = function(block) {\n    var setPageDelay = Blockly.Python.valueToCode(block, 'setPageDelay', Blockly.Python.ORDER_NONE);\n    return `sdfont._page_delay=${setPageDelay}` + \"\\n\";\n};\n\n// Block __SDFont_EFFECT_WIPE\nvar __SDFont_EFFECT_WIPE_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Wipe Effect\"\n        }\n    ],\n    \"colour\": \"#fd6a08\"\n};\n\nwindow['Blockly'].Blocks['__SDFont_EFFECT_WIPE'] = {\n    init: function() {\n        this.jsonInit(__SDFont_EFFECT_WIPE_json);\n    }\n};\n\nwindow['Blockly'].Python['__SDFont_EFFECT_WIPE'] = function(block) {\n        return [`sdfont.EFFECT_WIPE`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __SDFont_EFFECT_TYPEWRITER\nvar __SDFont_EFFECT_TYPEWRITER_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"Typewriter Effect\"\n        }\n    ],\n    \"colour\": \"#fd6a08\"\n};\n\nwindow['Blockly'].Blocks['__SDFont_EFFECT_TYPEWRITER'] = {\n    init: function() {\n        this.jsonInit(__SDFont_EFFECT_TYPEWRITER_json);\n    }\n};\n\nwindow['Blockly'].Python['__SDFont_EFFECT_TYPEWRITER'] = function(block) {\n        return [`sdfont.EFFECT_TYPEWRITER`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __SDFont_EFFECT_NONE\nvar __SDFont_EFFECT_NONE_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"No Effect\"\n        }\n    ],\n    \"colour\": \"#fd6a08\"\n};\n\nwindow['Blockly'].Blocks['__SDFont_EFFECT_NONE'] = {\n    init: function() {\n        this.jsonInit(__SDFont_EFFECT_NONE_json);\n    }\n};\n\nwindow['Blockly'].Python['__SDFont_EFFECT_NONE'] = function(block) {\n        return [`sdfont.EFFECT_NONE`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","code":{"load":["window['Blockly'].Python['__SDFont_load'] = function(block) {\n    var loadFont = Blockly.Python.valueToCode(block, 'loadFont', Blockly.Python.ORDER_NONE);\n    return `if (not \"/sd/fonts\" in sys.path):\n    sys.path.append(\"/sd/fonts\")\nimport sdfont\nsdfont.load(${loadFont})` + \"\\n\";\n};\n\n","if (not \"/sd/fonts\" in sys.path):\n    sys.path.append(\"/sd/fonts\")\nimport sdfont\nsdfont.load(${loadFont})"],"print":["window['Blockly'].Python['__SDFont_print'] = function(block) {\n    var print = Blockly.Python.valueToCode(block, 'print', Blockly.Python.ORDER_NONE);\nvar x = Blockly.Python.valueToCode(block, 'x', Blockly.Python.ORDER_NONE);\nvar y = Blockly.Python.valueToCode(block, 'y', Blockly.Python.ORDER_NONE);\nvar effect = Blockly.Python.valueToCode(block, 'effect', Blockly.Python.ORDER_NONE);\n    return `# draw text using given font with rolling effect\nsdfont.draw_text(${x}, ${y}, ${print}, color=lcd.get_fg(), effect=${effect})` + \"\\n\";\n};\n\n","# draw text using given font with rolling effect\nsdfont.draw_text(${x}, ${y}, ${print}, color=lcd.get_fg(), effect=${effect})"],"CENTER":["window['Blockly'].Python['__SDFont_CENTER'] = function(block) {\n        return [`lcd.CENTER`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","lcd.CENTER"],"textWidth":["window['Blockly'].Python['__SDFont_textWidth'] = function(block) {\n    var textWidth = Blockly.Python.valueToCode(block, 'textWidth', Blockly.Python.ORDER_NONE);\n    return [`sdfont.getTextWidth(${textWidth})`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","sdfont.getTextWidth(${textWidth})"],"vprint":["window['Blockly'].Python['__SDFont_vprint'] = function(block) {\n    var vprint = Blockly.Python.valueToCode(block, 'vprint', Blockly.Python.ORDER_NONE);\nvar x = Blockly.Python.valueToCode(block, 'x', Blockly.Python.ORDER_NONE);\nvar y = Blockly.Python.valueToCode(block, 'y', Blockly.Python.ORDER_NONE);\nvar effect = Blockly.Python.valueToCode(block, 'effect', Blockly.Python.ORDER_NONE);\n    return `# draw text vertically using given font with rolling effect\nsdfont.draw_vtext(${x}, ${y}, ${vprint}, color=lcd.get_fg(), effect=${effect})` + \"\\n\";\n};\n\n","# draw text vertically using given font with rolling effect\nsdfont.draw_vtext(${x}, ${y}, ${vprint}, color=lcd.get_fg(), effect=${effect})"],"vprintInRect":["window['Blockly'].Python['__SDFont_vprintInRect'] = function(block) {\n    var vprintInRect = Blockly.Python.valueToCode(block, 'vprintInRect', Blockly.Python.ORDER_NONE);\nvar x = Blockly.Python.valueToCode(block, 'x', Blockly.Python.ORDER_NONE);\nvar y = Blockly.Python.valueToCode(block, 'y', Blockly.Python.ORDER_NONE);\nvar width = Blockly.Python.valueToCode(block, 'width', Blockly.Python.ORDER_NONE);\nvar height = Blockly.Python.valueToCode(block, 'height', Blockly.Python.ORDER_NONE);\nvar color = Blockly.Python.valueToCode(block, 'color', Blockly.Python.ORDER_NONE);\nvar effect = Blockly.Python.valueToCode(block, 'effect', Blockly.Python.ORDER_NONE);\n    return `sdfont.draw_vtext_in_rect(${x}, ${y}, ${width}, ${height}, ${vprintInRect}, ${color}, lcd.get_bg(), effect=${effect})` + \"\\n\";\n};\n\n","sdfont.draw_vtext_in_rect(${x}, ${y}, ${width}, ${height}, ${vprintInRect}, ${color}, lcd.get_bg(), effect=${effect})"],"printInRect":["window['Blockly'].Python['__SDFont_printInRect'] = function(block) {\n    var printInRect = Blockly.Python.valueToCode(block, 'printInRect', Blockly.Python.ORDER_NONE);\nvar x = Blockly.Python.valueToCode(block, 'x', Blockly.Python.ORDER_NONE);\nvar y = Blockly.Python.valueToCode(block, 'y', Blockly.Python.ORDER_NONE);\nvar width = Blockly.Python.valueToCode(block, 'width', Blockly.Python.ORDER_NONE);\nvar height = Blockly.Python.valueToCode(block, 'height', Blockly.Python.ORDER_NONE);\nvar color = Blockly.Python.valueToCode(block, 'color', Blockly.Python.ORDER_NONE);\nvar effect = Blockly.Python.valueToCode(block, 'effect', Blockly.Python.ORDER_NONE);\n    return `sdfont.draw_text_in_rect(${x}, ${y}, ${width}, ${height}, ${printInRect}, ${color}, lcd.get_bg(), effect=${effect})` + \"\\n\";\n};\n\n","sdfont.draw_text_in_rect(${x}, ${y}, ${width}, ${height}, ${printInRect}, ${color}, lcd.get_bg(), effect=${effect})"],"setWipeDelay":["window['Blockly'].Python['__SDFont_setWipeDelay'] = function(block) {\n    var setWipeDelay = Blockly.Python.valueToCode(block, 'setWipeDelay', Blockly.Python.ORDER_NONE);\n    return `sdfont._wipe_delay=${setWipeDelay}` + \"\\n\";\n};\n\n","sdfont._wipe_delay=${setWipeDelay}"],"setLineDelay":["window['Blockly'].Python['__SDFont_setLineDelay'] = function(block) {\n    var setLineDelay = Blockly.Python.valueToCode(block, 'setLineDelay', Blockly.Python.ORDER_NONE);\n    return `sdfont._line_delay=${setLineDelay}` + \"\\n\";\n};\n\n","sdfont._line_delay=${setLineDelay}"],"setPageDelay":["window['Blockly'].Python['__SDFont_setPageDelay'] = function(block) {\n    var setPageDelay = Blockly.Python.valueToCode(block, 'setPageDelay', Blockly.Python.ORDER_NONE);\n    return `sdfont._page_delay=${setPageDelay}` + \"\\n\";\n};\n\n","sdfont._page_delay=${setPageDelay}"],"EFFECT_WIPE":["window['Blockly'].Python['__SDFont_EFFECT_WIPE'] = function(block) {\n        return [`sdfont.EFFECT_WIPE`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","sdfont.EFFECT_WIPE"],"EFFECT_TYPEWRITER":["window['Blockly'].Python['__SDFont_EFFECT_TYPEWRITER'] = function(block) {\n        return [`sdfont.EFFECT_TYPEWRITER`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","sdfont.EFFECT_TYPEWRITER"],"EFFECT_NONE":["window['Blockly'].Python['__SDFont_EFFECT_NONE'] = function(block) {\n        return [`sdfont.EFFECT_NONE`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n","sdfont.EFFECT_NONE"]}}