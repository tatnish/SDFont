{
    "category": "Graphics",
    "color": "#ffbc42",
    "blocks": ["__Graphics_set_fg", "__Graphics_set_bg", "__Graphics_fillRect", "__Graphics_fillRoundRect", "__Graphics_fillCircle", "__Graphics_fillTriangle", "__Graphics_makeTextNonTransparent", "__Graphics_get_bg", "__Graphics_get_bg", "__Graphics_image_buf", "__Graphics_roundrect", "__Graphics_CENTER", "__Graphics_LIGHTGREY", "__Graphics_MAGENTA", "__Graphics_MAROON", "__Graphics_NAVY", "__Graphics_OLIVE", "__Graphics_ORANGE", "__Graphics_PINK", "__Graphics_RED", "__Graphics_PURPLE", "__Graphics_WHITE", "__Graphics_DARKGREEN", "__Graphics_DARKGREY", "__Graphics_GREEN", "__Graphics_GREENYELLOW", "__Graphics_BLACK", "__Graphics_YELLOW"],
    "jscode": "// Block __Graphics_set_fg\nvar __Graphics_set_fg_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"setForegroundColor\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"setForegroundColor\"\n        }\n    ],\n    \"colour\": \"#ffbc42\"\n};\n\nwindow['Blockly'].Blocks['__Graphics_set_fg'] = {\n    init: function() {\n        this.jsonInit(__Graphics_set_fg_json);\n    }\n};\n\nwindow['Blockly'].Python['__Graphics_set_fg'] = function(block) {\n    var setForegroundColor = Blockly.Python.valueToCode(block, 'setForegroundColor', Blockly.Python.ORDER_NONE);\n    return `lcd.set_fg(${setForegroundColor})` + \"\\n\";\n};\n\n// Block __Graphics_set_bg\nvar __Graphics_set_bg_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1 %2\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"setBackgroundColor\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"setBackgroundColor\"\n        }\n    ],\n    \"colour\": \"#ffbc42\"\n};\n\nwindow['Blockly'].Blocks['__Graphics_set_bg'] = {\n    init: function() {\n        this.jsonInit(__Graphics_set_bg_json);\n    }\n};\n\nwindow['Blockly'].Python['__Graphics_set_bg'] = function(block) {\n    var setBackgroundColor = Blockly.Python.valueToCode(block, 'setBackgroundColor', Blockly.Python.ORDER_NONE);\n    return `lcd.set_bg(${setBackgroundColor})` + \"\\n\";\n};\n\n// Block __Graphics_fillRect\nvar __Graphics_fillRect_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"fillRectangle\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"x\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"x\"\n        }\n    ],\n    \"message2\": \"%1 %2\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"y\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"y\"\n        }\n    ],\n    \"message3\": \"%1 %2\",\n    \"args3\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"width\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"width\"\n        }\n    ],\n    \"message4\": \"%1 %2\",\n    \"args4\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"height\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"height\"\n        }\n    ],\n    \"message5\": \"%1 %2\",\n    \"args5\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"color\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"color\"\n        }\n    ],\n    \"message6\": \"%1\",\n    \"args6\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"label\"\n        }\n    ],\n    \"colour\": \"#ffbc42\"\n};\n\nwindow['Blockly'].Blocks['__Graphics_fillRect'] = {\n    init: function() {\n        this.jsonInit(__Graphics_fillRect_json);\n    }\n};\n\nwindow['Blockly'].Python['__Graphics_fillRect'] = function(block) {\n    var x = Blockly.Python.valueToCode(block, 'x', Blockly.Python.ORDER_NONE);\nvar y = Blockly.Python.valueToCode(block, 'y', Blockly.Python.ORDER_NONE);\nvar width = Blockly.Python.valueToCode(block, 'width', Blockly.Python.ORDER_NONE);\nvar height = Blockly.Python.valueToCode(block, 'height', Blockly.Python.ORDER_NONE);\nvar color = Blockly.Python.valueToCode(block, 'color', Blockly.Python.ORDER_NONE);\n    return `lcd.fillRect(${x}, ${y}, ${width}, ${height}, ${color})` + \"\\n\";\n};\n\n// Block __Graphics_fillRoundRect\nvar __Graphics_fillRoundRect_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"fill round rectangle\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"x\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"x\"\n        }\n    ],\n    \"message2\": \"%1 %2\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"y\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"y\"\n        }\n    ],\n    \"message3\": \"%1 %2\",\n    \"args3\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"width\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"width\"\n        }\n    ],\n    \"message4\": \"%1 %2\",\n    \"args4\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"height\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"height\"\n        }\n    ],\n    \"message5\": \"%1 %2\",\n    \"args5\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"r\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"r\"\n        }\n    ],\n    \"message6\": \"%1 %2\",\n    \"args6\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"color\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"color\"\n        }\n    ],\n    \"message7\": \"%1\",\n    \"args7\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"\"\n        }\n    ],\n    \"colour\": \"#ffbc42\"\n};\n\nwindow['Blockly'].Blocks['__Graphics_fillRoundRect'] = {\n    init: function() {\n        this.jsonInit(__Graphics_fillRoundRect_json);\n    }\n};\n\nwindow['Blockly'].Python['__Graphics_fillRoundRect'] = function(block) {\n    var x = Blockly.Python.valueToCode(block, 'x', Blockly.Python.ORDER_NONE);\nvar y = Blockly.Python.valueToCode(block, 'y', Blockly.Python.ORDER_NONE);\nvar width = Blockly.Python.valueToCode(block, 'width', Blockly.Python.ORDER_NONE);\nvar height = Blockly.Python.valueToCode(block, 'height', Blockly.Python.ORDER_NONE);\nvar r = Blockly.Python.valueToCode(block, 'r', Blockly.Python.ORDER_NONE);\nvar color = Blockly.Python.valueToCode(block, 'color', Blockly.Python.ORDER_NONE);\n    return `lcd.fillRoundRect(${x}, ${y}, ${width}, ${height}, color=${color}, r=${r})` + \"\\n\";\n};\n\n// Block __Graphics_fillCircle\nvar __Graphics_fillCircle_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"fill circle\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"x\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"x\"\n        }\n    ],\n    \"message2\": \"%1 %2\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"y\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"y\"\n        }\n    ],\n    \"message3\": \"%1 %2\",\n    \"args3\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"radius\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"radius\"\n        }\n    ],\n    \"message4\": \"%1 %2\",\n    \"args4\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"color\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"color\"\n        }\n    ],\n    \"message5\": \"%1\",\n    \"args5\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"\"\n        }\n    ],\n    \"colour\": \"#ffbc42\"\n};\n\nwindow['Blockly'].Blocks['__Graphics_fillCircle'] = {\n    init: function() {\n        this.jsonInit(__Graphics_fillCircle_json);\n    }\n};\n\nwindow['Blockly'].Python['__Graphics_fillCircle'] = function(block) {\n    var x = Blockly.Python.valueToCode(block, 'x', Blockly.Python.ORDER_NONE);\nvar y = Blockly.Python.valueToCode(block, 'y', Blockly.Python.ORDER_NONE);\nvar radius = Blockly.Python.valueToCode(block, 'radius', Blockly.Python.ORDER_NONE);\nvar color = Blockly.Python.valueToCode(block, 'color', Blockly.Python.ORDER_NONE);\n    return `lcd.fillCircle(${x}, ${y}, ${radius}, color=${color})` + \"\\n\";\n};\n\n// Block __Graphics_fillTriangle\nvar __Graphics_fillTriangle_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"fill triangle\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"x1\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"x1\"\n        }\n    ],\n    \"message2\": \"%1 %2\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"y1\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"y1\"\n        }\n    ],\n    \"message3\": \"%1 %2\",\n    \"args3\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"x2\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"x2\"\n        }\n    ],\n    \"message4\": \"%1 %2\",\n    \"args4\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"y2\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"y2\"\n        }\n    ],\n    \"message5\": \"%1 %2\",\n    \"args5\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"x3\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"x3\"\n        }\n    ],\n    \"message6\": \"%1 %2\",\n    \"args6\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"y3\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"y3\"\n        }\n    ],\n    \"message7\": \"%1 %2\",\n    \"args7\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"color\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"color\"\n        }\n    ],\n    \"message8\": \"%1\",\n    \"args8\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"\"\n        }\n    ],\n    \"colour\": \"#ffbc42\"\n};\n\nwindow['Blockly'].Blocks['__Graphics_fillTriangle'] = {\n    init: function() {\n        this.jsonInit(__Graphics_fillTriangle_json);\n    }\n};\n\nwindow['Blockly'].Python['__Graphics_fillTriangle'] = function(block) {\n    var x1 = Blockly.Python.valueToCode(block, 'x1', Blockly.Python.ORDER_NONE);\nvar y1 = Blockly.Python.valueToCode(block, 'y1', Blockly.Python.ORDER_NONE);\nvar x2 = Blockly.Python.valueToCode(block, 'x2', Blockly.Python.ORDER_NONE);\nvar y2 = Blockly.Python.valueToCode(block, 'y2', Blockly.Python.ORDER_NONE);\nvar x3 = Blockly.Python.valueToCode(block, 'x3', Blockly.Python.ORDER_NONE);\nvar y3 = Blockly.Python.valueToCode(block, 'y3', Blockly.Python.ORDER_NONE);\nvar color = Blockly.Python.valueToCode(block, 'color', Blockly.Python.ORDER_NONE);\n    return `lcd.fillTriangle(${x1}, ${y1}, ${x2}, ${y2}, ${x3}, ${y3}, color=${color})` + \"\\n\";\n};\n\n// Block __Graphics_makeTextNonTransparent\nvar __Graphics_makeTextNonTransparent_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"make Text Nontransparent\"\n        }\n    ],\n    \"colour\": \"#ffbc42\"\n};\n\nwindow['Blockly'].Blocks['__Graphics_makeTextNonTransparent'] = {\n    init: function() {\n        this.jsonInit(__Graphics_makeTextNonTransparent_json);\n    }\n};\n\nwindow['Blockly'].Python['__Graphics_makeTextNonTransparent'] = function(block) {\n        return `# This is to make text nontransparent.\n# Call this once at the very beginning of your program\nlcd.font(lcd.FONT_DejaVu24, transparent=False)\n` + \"\\n\";\n};\n\n// Block __Graphics_get_bg\nvar __Graphics_get_bg_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"background color\"\n        }\n    ],\n    \"colour\": \"#ffbc42\"\n};\n\nwindow['Blockly'].Blocks['__Graphics_get_bg'] = {\n    init: function() {\n        this.jsonInit(__Graphics_get_bg_json);\n    }\n};\n\nwindow['Blockly'].Python['__Graphics_get_bg'] = function(block) {\n        return [`lcd.get_bg()`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __Graphics_get_bg\nvar __Graphics_get_bg_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"background color\"\n        }\n    ],\n    \"colour\": \"#ffbc42\"\n};\n\nwindow['Blockly'].Blocks['__Graphics_get_bg'] = {\n    init: function() {\n        this.jsonInit(__Graphics_get_bg_json);\n    }\n};\n\nwindow['Blockly'].Python['__Graphics_get_bg'] = function(block) {\n        return [`lcd.get_bg()`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __Graphics_image_buf\nvar __Graphics_image_buf_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"draw JPEG\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"x\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"x\"\n        }\n    ],\n    \"message2\": \"%1 %2\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"y\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"y\"\n        }\n    ],\n    \"message3\": \"%1 %2\",\n    \"args3\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"file\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"file\"\n        }\n    ],\n    \"message4\": \"%1\",\n    \"args4\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"\"\n        }\n    ],\n    \"colour\": \"#ffbc42\"\n};\n\nwindow['Blockly'].Blocks['__Graphics_image_buf'] = {\n    init: function() {\n        this.jsonInit(__Graphics_image_buf_json);\n    }\n};\n\nwindow['Blockly'].Python['__Graphics_image_buf'] = function(block) {\n    var x = Blockly.Python.valueToCode(block, 'x', Blockly.Python.ORDER_NONE);\nvar y = Blockly.Python.valueToCode(block, 'y', Blockly.Python.ORDER_NONE);\nvar file = Blockly.Python.valueToCode(block, 'file', Blockly.Python.ORDER_NONE);\n    return `with open(${file}) as __f:\n    lcd.image_buff(${x}, ${y}, __f.read())\n` + \"\\n\";\n};\n\n// Block __Graphics_roundrect\nvar __Graphics_roundrect_json = {\n    \"previousStatement\": null,\n    \"nextStatement\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"round rectangle\"\n        }\n    ],\n    \"message1\": \"%1 %2\",\n    \"args1\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"x\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"x\"\n        }\n    ],\n    \"message2\": \"%1 %2\",\n    \"args2\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"y\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"y\"\n        }\n    ],\n    \"message3\": \"%1 %2\",\n    \"args3\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"width\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"width\"\n        }\n    ],\n    \"message4\": \"%1 %2\",\n    \"args4\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"height\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"height\"\n        }\n    ],\n    \"message5\": \"%1 %2\",\n    \"args5\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"r\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"r\"\n        }\n    ],\n    \"message6\": \"%1 %2\",\n    \"args6\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"color\"\n        },\n        {\n            \"type\": \"input_value\",\n            \"name\": \"color\"\n        }\n    ],\n    \"message7\": \"%1\",\n    \"args7\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"\"\n        }\n    ],\n    \"colour\": \"#ffbc42\"\n};\n\nwindow['Blockly'].Blocks['__Graphics_roundrect'] = {\n    init: function() {\n        this.jsonInit(__Graphics_roundrect_json);\n    }\n};\n\nwindow['Blockly'].Python['__Graphics_roundrect'] = function(block) {\n    var x = Blockly.Python.valueToCode(block, 'x', Blockly.Python.ORDER_NONE);\nvar y = Blockly.Python.valueToCode(block, 'y', Blockly.Python.ORDER_NONE);\nvar width = Blockly.Python.valueToCode(block, 'width', Blockly.Python.ORDER_NONE);\nvar height = Blockly.Python.valueToCode(block, 'height', Blockly.Python.ORDER_NONE);\nvar r = Blockly.Python.valueToCode(block, 'r', Blockly.Python.ORDER_NONE);\nvar color = Blockly.Python.valueToCode(block, 'color', Blockly.Python.ORDER_NONE);\n    return `lcd.roundrect(${x}, ${y}, ${width}, ${height}, color=${color}, r=${r})` + \"\\n\";\n};\n\n// Block __Graphics_CENTER\nvar __Graphics_CENTER_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"CENTER\"\n        }\n    ],\n    \"colour\": \"#ffbc42\"\n};\n\nwindow['Blockly'].Blocks['__Graphics_CENTER'] = {\n    init: function() {\n        this.jsonInit(__Graphics_CENTER_json);\n    }\n};\n\nwindow['Blockly'].Python['__Graphics_CENTER'] = function(block) {\n        return [`lcd.CENTER`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __Graphics_LIGHTGREY\nvar __Graphics_LIGHTGREY_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"LIGHTGREY color\"\n        }\n    ],\n    \"colour\": \"#ffbc42\"\n};\n\nwindow['Blockly'].Blocks['__Graphics_LIGHTGREY'] = {\n    init: function() {\n        this.jsonInit(__Graphics_LIGHTGREY_json);\n    }\n};\n\nwindow['Blockly'].Python['__Graphics_LIGHTGREY'] = function(block) {\n        return [`lcd.LIGHTGREY`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __Graphics_MAGENTA\nvar __Graphics_MAGENTA_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"MAGENTA color\"\n        }\n    ],\n    \"colour\": \"#ffbc42\"\n};\n\nwindow['Blockly'].Blocks['__Graphics_MAGENTA'] = {\n    init: function() {\n        this.jsonInit(__Graphics_MAGENTA_json);\n    }\n};\n\nwindow['Blockly'].Python['__Graphics_MAGENTA'] = function(block) {\n        return [`lcd.MAGENTA`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __Graphics_MAROON\nvar __Graphics_MAROON_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"MAROON color\"\n        }\n    ],\n    \"colour\": \"#ffbc42\"\n};\n\nwindow['Blockly'].Blocks['__Graphics_MAROON'] = {\n    init: function() {\n        this.jsonInit(__Graphics_MAROON_json);\n    }\n};\n\nwindow['Blockly'].Python['__Graphics_MAROON'] = function(block) {\n        return [`lcd.MAROON`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __Graphics_NAVY\nvar __Graphics_NAVY_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"NAVY color\"\n        }\n    ],\n    \"colour\": \"#ffbc42\"\n};\n\nwindow['Blockly'].Blocks['__Graphics_NAVY'] = {\n    init: function() {\n        this.jsonInit(__Graphics_NAVY_json);\n    }\n};\n\nwindow['Blockly'].Python['__Graphics_NAVY'] = function(block) {\n        return [`lcd.NAVY`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __Graphics_OLIVE\nvar __Graphics_OLIVE_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"OLIVE color\"\n        }\n    ],\n    \"colour\": \"#ffbc42\"\n};\n\nwindow['Blockly'].Blocks['__Graphics_OLIVE'] = {\n    init: function() {\n        this.jsonInit(__Graphics_OLIVE_json);\n    }\n};\n\nwindow['Blockly'].Python['__Graphics_OLIVE'] = function(block) {\n        return [`lcd.OLIVE`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __Graphics_ORANGE\nvar __Graphics_ORANGE_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"ORANGE color\"\n        }\n    ],\n    \"colour\": \"#ffbc42\"\n};\n\nwindow['Blockly'].Blocks['__Graphics_ORANGE'] = {\n    init: function() {\n        this.jsonInit(__Graphics_ORANGE_json);\n    }\n};\n\nwindow['Blockly'].Python['__Graphics_ORANGE'] = function(block) {\n        return [`lcd.ORANGE`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __Graphics_PINK\nvar __Graphics_PINK_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"PINK color\"\n        }\n    ],\n    \"colour\": \"#ffbc42\"\n};\n\nwindow['Blockly'].Blocks['__Graphics_PINK'] = {\n    init: function() {\n        this.jsonInit(__Graphics_PINK_json);\n    }\n};\n\nwindow['Blockly'].Python['__Graphics_PINK'] = function(block) {\n        return [`lcd.PINK`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __Graphics_RED\nvar __Graphics_RED_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"RED color\"\n        }\n    ],\n    \"colour\": \"#ffbc42\"\n};\n\nwindow['Blockly'].Blocks['__Graphics_RED'] = {\n    init: function() {\n        this.jsonInit(__Graphics_RED_json);\n    }\n};\n\nwindow['Blockly'].Python['__Graphics_RED'] = function(block) {\n        return [`lcd.RED`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __Graphics_PURPLE\nvar __Graphics_PURPLE_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"PURPLE color\"\n        }\n    ],\n    \"colour\": \"#ffbc42\"\n};\n\nwindow['Blockly'].Blocks['__Graphics_PURPLE'] = {\n    init: function() {\n        this.jsonInit(__Graphics_PURPLE_json);\n    }\n};\n\nwindow['Blockly'].Python['__Graphics_PURPLE'] = function(block) {\n        return [`lcd.PURPLE`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __Graphics_WHITE\nvar __Graphics_WHITE_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"WHITE color\"\n        }\n    ],\n    \"colour\": \"#ffbc42\"\n};\n\nwindow['Blockly'].Blocks['__Graphics_WHITE'] = {\n    init: function() {\n        this.jsonInit(__Graphics_WHITE_json);\n    }\n};\n\nwindow['Blockly'].Python['__Graphics_WHITE'] = function(block) {\n        return [`lcd.WHITE`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __Graphics_DARKGREEN\nvar __Graphics_DARKGREEN_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"DARK GREEN color\"\n        }\n    ],\n    \"colour\": \"#ffbc42\"\n};\n\nwindow['Blockly'].Blocks['__Graphics_DARKGREEN'] = {\n    init: function() {\n        this.jsonInit(__Graphics_DARKGREEN_json);\n    }\n};\n\nwindow['Blockly'].Python['__Graphics_DARKGREEN'] = function(block) {\n        return [`lcd.DARKGREEN`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __Graphics_DARKGREY\nvar __Graphics_DARKGREY_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"DARK GREY color\"\n        }\n    ],\n    \"colour\": \"#ffbc42\"\n};\n\nwindow['Blockly'].Blocks['__Graphics_DARKGREY'] = {\n    init: function() {\n        this.jsonInit(__Graphics_DARKGREY_json);\n    }\n};\n\nwindow['Blockly'].Python['__Graphics_DARKGREY'] = function(block) {\n        return [`lcd.DARKGREY`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __Graphics_GREEN\nvar __Graphics_GREEN_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"GREEN color\"\n        }\n    ],\n    \"colour\": \"#ffbc42\"\n};\n\nwindow['Blockly'].Blocks['__Graphics_GREEN'] = {\n    init: function() {\n        this.jsonInit(__Graphics_GREEN_json);\n    }\n};\n\nwindow['Blockly'].Python['__Graphics_GREEN'] = function(block) {\n        return [`lcd.GREEN`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __Graphics_GREENYELLOW\nvar __Graphics_GREENYELLOW_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"GREEN YELLOW color\"\n        }\n    ],\n    \"colour\": \"#ffbc42\"\n};\n\nwindow['Blockly'].Blocks['__Graphics_GREENYELLOW'] = {\n    init: function() {\n        this.jsonInit(__Graphics_GREENYELLOW_json);\n    }\n};\n\nwindow['Blockly'].Python['__Graphics_GREENYELLOW'] = function(block) {\n        return [`lcd.GREENYELLOW`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __Graphics_BLACK\nvar __Graphics_BLACK_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"BLACK color\"\n        }\n    ],\n    \"colour\": \"#ffbc42\"\n};\n\nwindow['Blockly'].Blocks['__Graphics_BLACK'] = {\n    init: function() {\n        this.jsonInit(__Graphics_BLACK_json);\n    }\n};\n\nwindow['Blockly'].Python['__Graphics_BLACK'] = function(block) {\n        return [`lcd.BLACK`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n// Block __Graphics_YELLOW\nvar __Graphics_YELLOW_json = {\n    \"output\": null,\n    \"message0\": \"%1\",\n    \"args0\": [\n        {\n            \"type\": \"field_label\",\n            \"text\": \"YELLOW color\"\n        }\n    ],\n    \"colour\": \"#ffbc42\"\n};\n\nwindow['Blockly'].Blocks['__Graphics_YELLOW'] = {\n    init: function() {\n        this.jsonInit(__Graphics_YELLOW_json);\n    }\n};\n\nwindow['Blockly'].Python['__Graphics_YELLOW'] = function(block) {\n        return [`lcd.YELLOW`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n",
    "code": {
        "set_fg": ["window['Blockly'].Python['__Graphics_set_fg'] = function(block) {\n    var setForegroundColor = Blockly.Python.valueToCode(block, 'setForegroundColor', Blockly.Python.ORDER_NONE);\n    return `lcd.set_fg(${setForegroundColor})` + \"\\n\";\n};\n\n", "lcd.set_fg(${setForegroundColor})"],
        "set_bg": ["window['Blockly'].Python['__Graphics_set_bg'] = function(block) {\n    var setBackgroundColor = Blockly.Python.valueToCode(block, 'setBackgroundColor', Blockly.Python.ORDER_NONE);\n    return `lcd.set_bg(${setBackgroundColor})` + \"\\n\";\n};\n\n", "lcd.set_bg(${setBackgroundColor})"],
        "fillRect": ["window['Blockly'].Python['__Graphics_fillRect'] = function(block) {\n    var x = Blockly.Python.valueToCode(block, 'x', Blockly.Python.ORDER_NONE);\nvar y = Blockly.Python.valueToCode(block, 'y', Blockly.Python.ORDER_NONE);\nvar width = Blockly.Python.valueToCode(block, 'width', Blockly.Python.ORDER_NONE);\nvar height = Blockly.Python.valueToCode(block, 'height', Blockly.Python.ORDER_NONE);\nvar color = Blockly.Python.valueToCode(block, 'color', Blockly.Python.ORDER_NONE);\n    return `lcd.fillRect(${x}, ${y}, ${width}, ${height}, ${color})` + \"\\n\";\n};\n\n", "lcd.fillRect(${x}, ${y}, ${width}, ${height}, ${color})"],
        "fillRoundRect": ["window['Blockly'].Python['__Graphics_fillRoundRect'] = function(block) {\n    var x = Blockly.Python.valueToCode(block, 'x', Blockly.Python.ORDER_NONE);\nvar y = Blockly.Python.valueToCode(block, 'y', Blockly.Python.ORDER_NONE);\nvar width = Blockly.Python.valueToCode(block, 'width', Blockly.Python.ORDER_NONE);\nvar height = Blockly.Python.valueToCode(block, 'height', Blockly.Python.ORDER_NONE);\nvar r = Blockly.Python.valueToCode(block, 'r', Blockly.Python.ORDER_NONE);\nvar color = Blockly.Python.valueToCode(block, 'color', Blockly.Python.ORDER_NONE);\n    return `lcd.fillRoundRect(${x}, ${y}, ${width}, ${height}, color=${color}, r=${r})` + \"\\n\";\n};\n\n", "lcd.fillRoundRect(${x}, ${y}, ${width}, ${height}, color=${color}, r=${r})"],
        "fillCircle": ["window['Blockly'].Python['__Graphics_fillCircle'] = function(block) {\n    var x = Blockly.Python.valueToCode(block, 'x', Blockly.Python.ORDER_NONE);\nvar y = Blockly.Python.valueToCode(block, 'y', Blockly.Python.ORDER_NONE);\nvar radius = Blockly.Python.valueToCode(block, 'radius', Blockly.Python.ORDER_NONE);\nvar color = Blockly.Python.valueToCode(block, 'color', Blockly.Python.ORDER_NONE);\n    return `lcd.fillCircle(${x}, ${y}, ${radius}, color=${color})` + \"\\n\";\n};\n\n", "lcd.fillCircle(${x}, ${y}, ${radius}, color=${color})"],
        "fillTriangle": ["window['Blockly'].Python['__Graphics_fillTriangle'] = function(block) {\n    var x1 = Blockly.Python.valueToCode(block, 'x1', Blockly.Python.ORDER_NONE);\nvar y1 = Blockly.Python.valueToCode(block, 'y1', Blockly.Python.ORDER_NONE);\nvar x2 = Blockly.Python.valueToCode(block, 'x2', Blockly.Python.ORDER_NONE);\nvar y2 = Blockly.Python.valueToCode(block, 'y2', Blockly.Python.ORDER_NONE);\nvar x3 = Blockly.Python.valueToCode(block, 'x3', Blockly.Python.ORDER_NONE);\nvar y3 = Blockly.Python.valueToCode(block, 'y3', Blockly.Python.ORDER_NONE);\nvar color = Blockly.Python.valueToCode(block, 'color', Blockly.Python.ORDER_NONE);\n    return `lcd.fillTriangle(${x1}, ${y1}, ${x2}, ${y2}, ${x3}, ${y3}, color=${color})` + \"\\n\";\n};\n\n", "lcd.fillTriangle(${x1}, ${y1}, ${x2}, ${y2}, ${x3}, ${y3}, color=${color})"],
        "makeTextNonTransparent": ["window['Blockly'].Python['__Graphics_makeTextNonTransparent'] = function(block) {\n        return `# This is to make text nontransparent.\n# Call this once at the very beginning of your program\nlcd.font(lcd.FONT_DejaVu24, transparent=False)\n` + \"\\n\";\n};\n\n", "# This is to make text nontransparent.\n# Call this once at the very beginning of your program\nlcd.font(lcd.FONT_DejaVu24, transparent=False)\n"],
        "get_bg": ["window['Blockly'].Python['__Graphics_get_bg'] = function(block) {\n        return [`lcd.get_bg()`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n", "lcd.get_bg()"],
        "image_buf": ["window['Blockly'].Python['__Graphics_image_buf'] = function(block) {\n    var x = Blockly.Python.valueToCode(block, 'x', Blockly.Python.ORDER_NONE);\nvar y = Blockly.Python.valueToCode(block, 'y', Blockly.Python.ORDER_NONE);\nvar file = Blockly.Python.valueToCode(block, 'file', Blockly.Python.ORDER_NONE);\n    return `with open(${file}) as __f:\n    lcd.image_buff(${x}, ${y}, __f.read())\n` + \"\\n\";\n};\n\n", "with open(${file}) as __f:\n    lcd.image_buff(${x}, ${y}, __f.read())\n"],
        "roundrect": ["window['Blockly'].Python['__Graphics_roundrect'] = function(block) {\n    var x = Blockly.Python.valueToCode(block, 'x', Blockly.Python.ORDER_NONE);\nvar y = Blockly.Python.valueToCode(block, 'y', Blockly.Python.ORDER_NONE);\nvar width = Blockly.Python.valueToCode(block, 'width', Blockly.Python.ORDER_NONE);\nvar height = Blockly.Python.valueToCode(block, 'height', Blockly.Python.ORDER_NONE);\nvar r = Blockly.Python.valueToCode(block, 'r', Blockly.Python.ORDER_NONE);\nvar color = Blockly.Python.valueToCode(block, 'color', Blockly.Python.ORDER_NONE);\n    return `lcd.roundrect(${x}, ${y}, ${width}, ${height}, color=${color}, r=${r})` + \"\\n\";\n};\n\n", "lcd.roundrect(${x}, ${y}, ${width}, ${height}, color=${color}, r=${r})"],
        "CENTER": ["window['Blockly'].Python['__Graphics_CENTER'] = function(block) {\n        return [`lcd.CENTER`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n", "lcd.CENTER"],
        "LIGHTGREY": ["window['Blockly'].Python['__Graphics_LIGHTGREY'] = function(block) {\n        return [`lcd.LIGHTGREY`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n", "lcd.LIGHTGREY"],
        "MAGENTA": ["window['Blockly'].Python['__Graphics_MAGENTA'] = function(block) {\n        return [`lcd.MAGENTA`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n", "lcd.MAGENTA"],
        "MAROON": ["window['Blockly'].Python['__Graphics_MAROON'] = function(block) {\n        return [`lcd.MAROON`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n", "lcd.MAROON"],
        "NAVY": ["window['Blockly'].Python['__Graphics_NAVY'] = function(block) {\n        return [`lcd.NAVY`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n", "lcd.NAVY"],
        "OLIVE": ["window['Blockly'].Python['__Graphics_OLIVE'] = function(block) {\n        return [`lcd.OLIVE`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n", "lcd.OLIVE"],
        "ORANGE": ["window['Blockly'].Python['__Graphics_ORANGE'] = function(block) {\n        return [`lcd.ORANGE`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n", "lcd.ORANGE"],
        "PINK": ["window['Blockly'].Python['__Graphics_PINK'] = function(block) {\n        return [`lcd.PINK`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n", "lcd.PINK"],
        "RED": ["window['Blockly'].Python['__Graphics_RED'] = function(block) {\n        return [`lcd.RED`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n", "lcd.RED"],
        "PURPLE": ["window['Blockly'].Python['__Graphics_PURPLE'] = function(block) {\n        return [`lcd.PURPLE`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n", "lcd.PURPLE"],
        "WHITE": ["window['Blockly'].Python['__Graphics_WHITE'] = function(block) {\n        return [`lcd.WHITE`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n", "lcd.WHITE"],
        "DARKGREEN": ["window['Blockly'].Python['__Graphics_DARKGREEN'] = function(block) {\n        return [`lcd.DARKGREEN`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n", "lcd.DARKGREEN"],
        "DARKGREY": ["window['Blockly'].Python['__Graphics_DARKGREY'] = function(block) {\n        return [`lcd.DARKGREY`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n", "lcd.DARKGREY"],
        "GREEN": ["window['Blockly'].Python['__Graphics_GREEN'] = function(block) {\n        return [`lcd.GREEN`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n", "lcd.GREEN"],
        "GREENYELLOW": ["window['Blockly'].Python['__Graphics_GREENYELLOW'] = function(block) {\n        return [`lcd.GREENYELLOW`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n", "lcd.GREENYELLOW"],
        "BLACK": ["window['Blockly'].Python['__Graphics_BLACK'] = function(block) {\n        return [`lcd.BLACK`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n", "lcd.BLACK"],
        "YELLOW": ["window['Blockly'].Python['__Graphics_YELLOW'] = function(block) {\n        return [`lcd.YELLOW`, Blockly.Python.ORDER_CONDITIONAL]\n};\n\n", "lcd.YELLOW"]
    }
}